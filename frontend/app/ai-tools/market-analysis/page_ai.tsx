'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { 
  BarChart3, 
  ArrowLeft, 
  TrendingUp, 
  DollarSign, 
  MapPin, 
  Users,
  Sparkles,
  RefreshCw,
  Target,
  CheckCircle,
  AlertCircle,
  Download,
  Zap,
  Award,
  Calendar,
  Activity
} from 'lucide-react';
import AuthGuard from '@/components/AuthGuard';
import { useRouter } from 'next/navigation';
import { recruitmentAIService, type TalentPoolInsights } from '@/lib/recruitment-ai-service';

interface MarketAnalysisFormData {
  role: string;
  location: string;
  experience: string;
  skills: string;
}

function MarketAnalysisContent() {
  const router = useRouter();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [formData, setFormData] = useState<MarketAnalysisFormData>({
    role: '',
    location: '',
    experience: '',
    skills: ''
  });
  const [insights, setInsights] = useState<TalentPoolInsights | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [aiStatus, setAiStatus] = useState<'checking' | 'available' | 'fallback'>('checking');

  // Check AI service availability
  useEffect(() => {
    const checkAIService = async () => {
      try {
        setAiStatus('checking');
        await recruitmentAIService.checkAIHealth();
        setAiStatus('available');
      } catch {
        setAiStatus('fallback');
      }
    };
    
    checkAIService();
  }, []);

  const handleAnalyze = async () => {
    if (!formData.role || !formData.location) return;

    setIsAnalyzing(true);
    setError(null);
    
    try {
      // Parse skills from comma-separated string
      const skillsArray = formData.skills 
        ? formData.skills.split(',').map(skill => skill.trim()).filter(Boolean)
        : [];

      const requirements = {
        role: formData.role,
        skills: skillsArray,
        experience: formData.experience,
        location: formData.location
      };

      const marketInsights = await recruitmentAIService.getTalentPoolInsights(requirements);
      setInsights(marketInsights);
      setAiStatus('available');
    } catch (err) {
      console.error('Market analysis failed:', err);
      setError('Failed to generate market analysis. Please try again.');
      setAiStatus('fallback');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const downloadAnalysis = () => {
    if (!insights || !formData.role) return;
    
    const analysisText = `
MARKET ANALYSIS REPORT
=====================

Role: ${formData.role}
Location: ${formData.location}
Experience: ${formData.experience}
Skills: ${formData.skills}
Analysis Date: ${new Date().toLocaleDateString()}

HOT SKILLS IN DEMAND
====================
${insights.hot_skills.map((skill, index) => `${index + 1}. ${skill}`).join('\n')}

EMERGING TECHNOLOGIES
====================
${insights.emerging_technologies.map((tech, index) => `${index + 1}. ${tech}`).join('\n')}

SALARY TRENDS
=============
${Object.entries(insights.salary_trends).map(([level, salary]) => `${level}: $${salary.toLocaleString()}`).join('\n')}

MARKET DEMAND ANALYSIS
=====================
Demand/Supply Ratio: ${insights.market_demand.demand_supply_ratio}
Competition Level: ${insights.market_demand.competition_level}
Hiring Difficulty: ${insights.market_demand.hiring_difficulty}

RECOMMENDATIONS
===============
${insights.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

---
Generated by PortReview AI Market Analysis
    `.trim();
    
    const element = document.createElement("a");
    const file = new Blob([analysisText], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${formData.role.replace(/\s+/g, '_')}_Market_Analysis.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const getDemandColor = (ratio: number) => {
    if (ratio >= 1.5) return 'text-red-400';
    if (ratio >= 1.0) return 'text-yellow-400';
    return 'text-green-400';
  };

  const getCompetitionColor = (level: string) => {
    if (level === 'High') return 'bg-red-600/20 text-red-300 border-red-500/40';
    if (level === 'Medium') return 'bg-yellow-600/20 text-yellow-300 border-yellow-500/40';
    return 'bg-green-600/20 text-green-300 border-green-500/40';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-800">
      {/* Animated Background Effects */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-emerald-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-teal-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-green-500/5 rounded-full blur-3xl animate-pulse"></div>
      </div>
      
      <div className="relative z-10 container mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8 max-w-7xl">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <Button 
            variant="ghost" 
            size="sm"
            onClick={() => router.back()}
            className="text-white hover:bg-white/10"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to AI Tools
          </Button>
          <div>
            <div className="flex items-center gap-3 mb-2">
              <BarChart3 className="w-8 h-8 text-emerald-400" />
              <h1 className="text-3xl font-bold text-white">AI Market Analysis</h1>
            </div>
            <p className="text-slate-300">Get real-time salary insights and competitive benchmarking</p>
          </div>
        </div>

        {/* AI Status Indicator */}
        <div className="mb-6 flex items-center gap-2">
          {aiStatus === 'checking' && (
            <>
              <RefreshCw className="w-4 h-4 text-yellow-400 animate-spin" />
              <span className="text-sm text-yellow-400">Checking AI service...</span>
            </>
          )}
          {aiStatus === 'available' && (
            <>
              <CheckCircle className="w-4 h-4 text-green-400" />
              <span className="text-sm text-green-400">AI Market Analysis Available</span>
            </>
          )}
          {aiStatus === 'fallback' && (
            <>
              <AlertCircle className="w-4 h-4 text-orange-400" />
              <span className="text-sm text-orange-400">Using Enhanced Fallback Analysis</span>
            </>
          )}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8">
          {/* Input Form */}
          <Card className="bg-white/10 backdrop-blur-sm border-white/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Target className="w-5 h-5" />
                Market Analysis Parameters
              </CardTitle>
              <CardDescription className="text-slate-300">
                Provide role details to get comprehensive market insights
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {error && (
                <div className="p-3 bg-red-900/20 border border-red-700 rounded-lg">
                  <div className="flex items-center gap-2">
                    <AlertCircle className="w-4 h-4 text-red-400" />
                    <span className="text-sm text-red-300">Analysis Error</span>
                  </div>
                  <p className="text-xs text-red-200 mt-1">{error}</p>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleAnalyze()}
                    className="mt-2 border-red-600 text-red-300 hover:bg-red-900/30"
                  >
                    Retry Analysis
                  </Button>
                </div>
              )}

              <div className="space-y-4">
                <div>
                  <Label htmlFor="role" className="text-white text-sm font-medium">Job Role</Label>
                  <Input
                    id="role"
                    value={formData.role}
                    onChange={(e) => setFormData({ ...formData, role: e.target.value })}
                    placeholder="e.g. Senior Software Engineer, Product Manager..."
                    className="bg-white/5 border-white/20 text-white placeholder:text-slate-400 mt-2"
                  />
                </div>

                <div>
                  <Label htmlFor="location" className="text-white text-sm font-medium">Location</Label>
                  <Input
                    id="location"
                    value={formData.location}
                    onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                    placeholder="e.g. San Francisco, New York, Remote..."
                    className="bg-white/5 border-white/20 text-white placeholder:text-slate-400 mt-2"
                  />
                </div>

                <div>
                  <Label htmlFor="experience" className="text-white text-sm font-medium">Experience Level</Label>
                  <Input
                    id="experience"
                    value={formData.experience}
                    onChange={(e) => setFormData({ ...formData, experience: e.target.value })}
                    placeholder="e.g. 3-5 years, Senior, Entry-level..."
                    className="bg-white/5 border-white/20 text-white placeholder:text-slate-400 mt-2"
                  />
                </div>

                <div>
                  <Label htmlFor="skills" className="text-white text-sm font-medium">Key Skills (Optional)</Label>
                  <Input
                    id="skills"
                    value={formData.skills}
                    onChange={(e) => setFormData({ ...formData, skills: e.target.value })}
                    placeholder="e.g. React, Python, AWS, Machine Learning..."
                    className="bg-white/5 border-white/20 text-white placeholder:text-slate-400 mt-2"
                  />
                  <p className="text-xs text-slate-400 mt-1">Separate multiple skills with commas</p>
                </div>
              </div>

              <Button
                onClick={handleAnalyze}
                disabled={!formData.role || !formData.location || isAnalyzing || aiStatus === 'checking'}
                className="w-full bg-gradient-to-r from-emerald-600 to-blue-600 hover:from-emerald-700 hover:to-blue-700 text-white py-3"
              >
                {isAnalyzing ? (
                  <>
                    <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                    Analyzing Market Data...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4 mr-2" />
                    Analyze Market
                  </>
                )}
              </Button>

              <div className="grid grid-cols-3 gap-4 pt-4 border-t border-white/10">
                <div className="text-center">
                  <div className="w-12 h-12 bg-emerald-500/20 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <DollarSign className="w-6 h-6 text-emerald-400" />
                  </div>
                  <div className="text-xs text-slate-300">Salary Data</div>
                </div>
                <div className="text-center">
                  <div className="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <TrendingUp className="w-6 h-6 text-blue-400" />
                  </div>
                  <div className="text-xs text-slate-300">Market Trends</div>
                </div>
                <div className="text-center">
                  <div className="w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <Users className="w-6 h-6 text-purple-400" />
                  </div>
                  <div className="text-xs text-slate-300">Competition</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Analysis Results */}
          <Card className="bg-white/10 backdrop-blur-sm border-white/20">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="text-white flex items-center gap-2">
                    <TrendingUp className="w-5 h-5" />
                    Market Analysis Results
                  </CardTitle>
                  <CardDescription className="text-slate-300">
                    Comprehensive insights and recommendations
                  </CardDescription>
                </div>
                {insights && (
                  <Button
                    onClick={downloadAnalysis}
                    variant="outline"
                    size="sm"
                    className="border-slate-600 text-slate-300 hover:bg-slate-700"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Download
                  </Button>
                )}
              </div>
            </CardHeader>
            <CardContent>
              {insights ? (
                <div className="space-y-6">
                  {/* Market Demand Overview */}
                  <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                    <div className="bg-slate-900/50 rounded-lg p-4 border border-slate-700 text-center">
                      <div className={`text-2xl font-bold mb-1 ${getDemandColor(insights.market_demand.demand_supply_ratio)}`}>
                        {insights.market_demand.demand_supply_ratio}x
                      </div>
                      <div className="text-xs text-slate-400">Demand/Supply Ratio</div>
                    </div>
                    <div className="bg-slate-900/50 rounded-lg p-4 border border-slate-700 text-center">
                      <Badge className={`mb-2 ${getCompetitionColor(insights.market_demand.competition_level)}`}>
                        {insights.market_demand.competition_level}
                      </Badge>
                      <div className="text-xs text-slate-400">Competition Level</div>
                    </div>
                    <div className="bg-slate-900/50 rounded-lg p-4 border border-slate-700 text-center">
                      <div className="text-lg font-bold text-white mb-1">
                        {insights.market_demand.hiring_difficulty}
                      </div>
                      <div className="text-xs text-slate-400">Hiring Difficulty</div>
                    </div>
                  </div>

                  {/* Hot Skills */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <Zap className="w-5 h-5 text-yellow-400" />
                      <h3 className="text-lg font-semibold text-white">Hot Skills in Demand</h3>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {insights.hot_skills.map((skill, index) => (
                        <Badge key={index} className="bg-yellow-600/20 text-yellow-300 border-yellow-500/40">
                          {skill}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  {/* Emerging Technologies */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <Activity className="w-5 h-5 text-green-400" />
                      <h3 className="text-lg font-semibold text-white">Emerging Technologies</h3>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {insights.emerging_technologies.map((tech, index) => (
                        <Badge key={index} className="bg-green-600/20 text-green-300 border-green-500/40">
                          {tech}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  {/* Salary Trends */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <DollarSign className="w-5 h-5 text-emerald-400" />
                      <h3 className="text-lg font-semibold text-white">Salary Trends</h3>
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                      {Object.entries(insights.salary_trends).map(([level, salary]) => (
                        <div key={level} className="bg-slate-900/50 rounded-lg p-3 border border-slate-700">
                          <div className="flex items-center justify-between">
                            <span className="text-slate-300 text-sm capitalize">{level.replace('_', ' ')}</span>
                            <span className="text-emerald-400 font-semibold">${salary.toLocaleString()}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Recommendations */}
                  <div>
                    <div className="flex items-center gap-2 mb-3">
                      <Award className="w-5 h-5 text-blue-400" />
                      <h3 className="text-lg font-semibold text-white">AI Recommendations</h3>
                    </div>
                    <div className="space-y-2">
                      {insights.recommendations.map((recommendation, index) => (
                        <div key={index} className="flex items-start gap-2 bg-slate-900/50 rounded-lg p-3 border border-slate-700">
                          <CheckCircle className="w-4 h-4 text-blue-400 mt-0.5 flex-shrink-0" />
                          <span className="text-slate-300 text-sm">{recommendation}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-12 text-slate-400">
                  <BarChart3 className="w-16 h-16 mx-auto mb-4 opacity-50" />
                  <div className="text-lg mb-2">Market Analysis Ready</div>
                  <div className="text-sm">Enter job details to generate comprehensive market insights</div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

export default function MarketAnalysis() {
  return (
    <AuthGuard requiredUserType="recruiter">
      <MarketAnalysisContent />
    </AuthGuard>
  );
}
