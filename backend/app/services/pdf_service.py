from datetime import datetime
from typing import Dict, Any, List
import io
import json
import os

class SimplePDFGenerator:
    """
    Simple PDF-like text report generator without ReportLab dependency
    Creates structured text reports that can be converted to PDF on frontend
    """
    
    def __init__(self):
        self.line_separator = "=" * 80
        self.section_separator = "-" * 60
        
    def _format_header(self, title: str, subtitle: str = None) -> str:
        """Format report header"""
        header = []
        header.append(self.line_separator)
        header.append("PORTREVIEW AI PLATFORM")
        header.append(f"Generated: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}")
        header.append(self.line_separator)
        header.append("")
        header.append(title.upper())
        if subtitle:
            header.append(subtitle)
        header.append("")
        header.append(self.section_separator)
        return "\n".join(header)
    
    def _format_section(self, title: str, content: List[str] = None, 
                       table_data: List[List[str]] = None, metrics: List[Dict] = None) -> str:
        """Format a report section"""
        section = [f"\n{title.upper()}", self.section_separator]
        
        # Add metrics
        if metrics:
            section.append("\nKEY METRICS:")
            for metric in metrics:
                section.append(f"  • {metric['label']}: {metric['value']}")
            section.append("")
        
        # Add table data
        if table_data and len(table_data) > 1:
            headers = table_data[0]
            rows = table_data[1:]
            
            # Calculate column widths
            col_widths = [max(len(str(row[i])) for row in [headers] + rows) + 2 
                         for i in range(len(headers))]
            
            # Format header
            header_row = "".join(headers[i].ljust(col_widths[i]) for i in range(len(headers)))
            section.append(header_row)
            section.append("-" * len(header_row))
            
            # Format data rows
            for row in rows:
                data_row = "".join(str(row[i]).ljust(col_widths[i]) for i in range(len(row)))
                section.append(data_row)
            section.append("")
        
        # Add content
        if content:
            for item in content:
                section.append(item)
            section.append("")
        
        return "\n".join(section)
    
    def _format_footer(self) -> str:
        """Format report footer"""
        footer = []
        footer.append(self.line_separator)
        footer.append("This report was generated by PortReview AI Platform")
        footer.append("For more information, visit our platform")
        footer.append(self.line_separator)
        return "\n".join(footer)

    def generate_candidate_analysis_text(self, candidate_data: Dict[str, Any], 
                                        analysis_data: Dict[str, Any]) -> str:
        """Generate candidate analysis text report"""
        
        report = []
        
        # Header
        report.append(self._format_header(
            "Candidate Analysis Report",
            f"Analysis for {candidate_data.get('name', 'Unknown')} - {candidate_data.get('role', 'Unknown Role')}"
        ))
        
        # Candidate Overview
        overview_data = [
            ['Field', 'Value'],
            ['Name', candidate_data.get('name', 'N/A')],
            ['Role', candidate_data.get('role', 'N/A')],
            ['Experience', candidate_data.get('experience', 'N/A')],
            ['Location', candidate_data.get('location', 'N/A')],
        ]
        report.append(self._format_section("Candidate Overview", table_data=overview_data))
        
        # Analysis Scores
        metrics = []
        if 'technical_score' in analysis_data:
            metrics.append({'label': 'Technical Score', 'value': f"{analysis_data['technical_score']}%"})
        if 'cultural_fit' in analysis_data:
            metrics.append({'label': 'Cultural Fit', 'value': f"{analysis_data['cultural_fit']}%"})
        if 'experience_match' in analysis_data:
            metrics.append({'label': 'Experience Match', 'value': f"{analysis_data.get('experience_match', 'N/A')}%"})
        
        if metrics:
            report.append(self._format_section("Assessment Scores", metrics=metrics))
        
        # Strengths
        if 'strengths' in analysis_data:
            strengths = [f"• {strength}" for strength in analysis_data['strengths']]
            report.append(self._format_section("Key Strengths", content=strengths))
        
        # Areas for Improvement
        if 'weaknesses' in analysis_data:
            weaknesses = [f"• {weakness}" for weakness in analysis_data['weaknesses']]
            report.append(self._format_section("Areas for Improvement", content=weaknesses))
        
        # Hiring Recommendation
        if 'hiring_recommendation' in analysis_data:
            report.append(self._format_section("Hiring Recommendation", 
                                            content=[analysis_data['hiring_recommendation']]))
        
        # Footer
        report.append(self._format_footer())
        
        return "\n".join(report)

    def generate_market_analysis_text(self, form_data: Dict[str, Any], 
                                    insights_data: Dict[str, Any]) -> str:
        """Generate market analysis text report"""
        
        report = []
        
        # Header
        report.append(self._format_header(
            "Market Analysis Report",
            f"Market insights for {form_data.get('role', 'Unknown Role')} in {form_data.get('location', 'Unknown Location')}"
        ))
        
        # Analysis Parameters
        params_data = [
            ['Parameter', 'Value'],
            ['Role', form_data.get('role', 'N/A')],
            ['Location', form_data.get('location', 'N/A')],
            ['Experience Level', form_data.get('experience', 'N/A')],
            ['Skills Focus', form_data.get('skills', 'N/A')],
        ]
        report.append(self._format_section("Analysis Parameters", table_data=params_data))
        
        # Market Demand Metrics
        market_demand = insights_data.get('market_demand', {})
        demand_metrics = [
            {'label': 'Demand/Supply Ratio', 'value': f"{market_demand.get('demand_supply_ratio', 'N/A')}x"},
            {'label': 'Competition Level', 'value': market_demand.get('competition_level', 'N/A')},
            {'label': 'Hiring Difficulty', 'value': market_demand.get('hiring_difficulty', 'N/A')},
        ]
        report.append(self._format_section("Market Demand Analysis", metrics=demand_metrics))
        
        # Hot Skills
        if 'hot_skills' in insights_data:
            skills = [f"• {skill}" for skill in insights_data['hot_skills']]
            report.append(self._format_section("Hot Skills in Demand", content=skills))
        
        # Emerging Technologies
        if 'emerging_technologies' in insights_data:
            tech = [f"• {technology}" for technology in insights_data['emerging_technologies']]
            report.append(self._format_section("Emerging Technologies", content=tech))
        
        # Salary Trends
        if 'salary_trends' in insights_data:
            salary_data = [['Skill', 'Growth Rate']]
            for skill, growth in insights_data['salary_trends'].items():
                salary_data.append([skill, f"+{growth}%"])
            report.append(self._format_section("Salary Growth Trends", table_data=salary_data))
        
        # Recommendations
        if 'recommendations' in insights_data:
            recommendations = [f"• {rec}" for rec in insights_data['recommendations']]
            report.append(self._format_section("Strategic Recommendations", content=recommendations))
        
        # Footer
        report.append(self._format_footer())
        
        return "\n".join(report)

    def generate_hiring_prediction_text(self, candidate_data: Dict[str, Any], 
                                      prediction_data: Dict[str, Any]) -> str:
        """Generate hiring prediction text report"""
        
        report = []
        
        # Header
        report.append(self._format_header(
            "Hiring Prediction Report",
            f"Success prediction for {candidate_data.get('name', 'Unknown Candidate')}"
        ))
        
        # Candidate Profile
        profile_data = [
            ['Field', 'Value'],
            ['Name', candidate_data.get('name', 'N/A')],
            ['Role', candidate_data.get('role', 'N/A')],
            ['Experience', candidate_data.get('experience', 'N/A')],
            ['Location', candidate_data.get('location', 'N/A')],
        ]
        report.append(self._format_section("Candidate Profile", table_data=profile_data))
        
        # Prediction Metrics
        success_prob = prediction_data.get('success_probability', 0)
        prediction_metrics = [
            {'label': 'Success Probability', 'value': f"{int(success_prob * 100)}%"},
            {'label': 'Confidence Level', 'value': prediction_data.get('confidence_level', 'N/A')},
            {'label': 'Performance Prediction', 'value': prediction_data.get('performance_prediction', 'N/A')},
        ]
        report.append(self._format_section("Prediction Results", metrics=prediction_metrics))
        
        # Success Factors
        if 'key_success_factors' in prediction_data:
            factors = [f"• {factor}" for factor in prediction_data['key_success_factors']]
            report.append(self._format_section("Key Success Factors", content=factors))
        
        # Risk Factors
        if 'potential_risks' in prediction_data:
            risks = [f"• {risk}" for risk in prediction_data['potential_risks']]
            report.append(self._format_section("Potential Risks", content=risks))
        
        # Onboarding Recommendations
        if 'onboarding_recommendations' in prediction_data:
            recommendations = [f"• {rec}" for rec in prediction_data['onboarding_recommendations']]
            report.append(self._format_section("Onboarding Recommendations", content=recommendations))
        
        # Footer
        report.append(self._format_footer())
        
        return "\n".join(report)

    def generate_interview_kit_text(self, role: str, kit_data: Dict[str, Any]) -> str:
        """Generate interview kit text report"""
        
        report = []
        
        # Header
        report.append(self._format_header(
            "Interview Kit",
            f"Comprehensive interview guide for {role}"
        ))
        
        # Technical Questions
        if 'technical_questions' in kit_data and kit_data['technical_questions']:
            tech_content = []
            for i, q in enumerate(kit_data['technical_questions'], 1):
                tech_content.append(f"{i}. {q.get('question', 'N/A')}")
                tech_content.append(f"   Skill Focus: {q.get('skill', 'N/A')}")
                tech_content.append(f"   Difficulty: {q.get('difficulty', 'N/A')}")
                if q.get('expected_answer'):
                    tech_content.append(f"   Expected Answer: {q.get('expected_answer')}")
                tech_content.append("")  # Empty line for spacing
            
            report.append(self._format_section("Technical Questions", content=tech_content))
        
        # Behavioral Questions
        if 'behavioral_questions' in kit_data and kit_data['behavioral_questions']:
            behavioral_content = []
            for i, q in enumerate(kit_data['behavioral_questions'], 1):
                behavioral_content.append(f"{i}. {q.get('question', 'N/A')}")
                if q.get('purpose'):
                    behavioral_content.append(f"   Purpose: {q.get('purpose')}")
                behavioral_content.append("")  # Empty line for spacing
            
            report.append(self._format_section("Behavioral Questions", content=behavioral_content))
        
        # Coding Challenges
        if 'coding_challenges' in kit_data and kit_data['coding_challenges']:
            coding_content = []
            for i, c in enumerate(kit_data['coding_challenges'], 1):
                coding_content.append(f"{i}. {c.get('title', c.get('question', 'N/A'))}")
                if c.get('description'):
                    coding_content.append(f"   Description: {c.get('description')}")
                coding_content.append(f"   Difficulty: {c.get('difficulty', 'N/A')}")
                coding_content.append("")  # Empty line for spacing
            
            report.append(self._format_section("Coding Challenges", content=coding_content))
        
        # Footer
        report.append(self._format_footer())
        
        return "\n".join(report)

    def generate_job_description_text(self, form_data: Dict[str, Any], 
                                    job_description: str) -> str:
        """Generate job description text report"""
        
        report = []
        
        # Header
        report.append(self._format_header(
            "Job Description",
            f"{form_data.get('role', 'Unknown Role')} at {form_data.get('company', 'Unknown Company')}"
        ))
        
        # Job Overview
        overview_data = [
            ['Field', 'Value'],
            ['Position', form_data.get('role', 'N/A')],
            ['Company', form_data.get('company', 'N/A')],
            ['Location', form_data.get('location', 'N/A')],
            ['Experience Level', form_data.get('experience', 'N/A')],
        ]
        report.append(self._format_section("Job Overview", table_data=overview_data))
        
        # Job Description Content
        lines = job_description.split('\n')
        content = []
        
        for line in lines:
            line = line.strip()
            if line.startswith('#'):
                # Section header
                if content:
                    report.append(self._format_section("Job Description", content=content))
                    content = []
                section_title = line.replace('#', '').strip()
                if section_title:
                    content = [f"{section_title.upper()}:"]
            elif line.startswith('- ') or line.startswith('* '):
                content.append(f"• {line[2:]}")
            elif line:
                content.append(line)
        
        # Add remaining content
        if content:
            report.append(self._format_section("Job Description", content=content))
        
        # Footer
        report.append(self._format_footer())
        
        return "\n".join(report)

    # Methods that return text instead of bytes for compatibility
    def generate_candidate_analysis_pdf(self, candidate_data: Dict[str, Any], 
                                      analysis_data: Dict[str, Any]) -> bytes:
        """Generate candidate analysis report as text bytes"""
        text_report = self.generate_candidate_analysis_text(candidate_data, analysis_data)
        return text_report.encode('utf-8')

    def generate_market_analysis_pdf(self, form_data: Dict[str, Any], 
                                   insights_data: Dict[str, Any]) -> bytes:
        """Generate market analysis report as text bytes"""
        text_report = self.generate_market_analysis_text(form_data, insights_data)
        return text_report.encode('utf-8')

    def generate_hiring_prediction_pdf(self, candidate_data: Dict[str, Any], 
                                     prediction_data: Dict[str, Any]) -> bytes:
        """Generate hiring prediction report as text bytes"""
        text_report = self.generate_hiring_prediction_text(candidate_data, prediction_data)
        return text_report.encode('utf-8')

    def generate_interview_kit_pdf(self, role: str, kit_data: Dict[str, Any]) -> bytes:
        """Generate interview kit report as text bytes"""
        text_report = self.generate_interview_kit_text(role, kit_data)
        return text_report.encode('utf-8')

    def generate_job_description_pdf(self, form_data: Dict[str, Any], 
                                   job_description: str) -> bytes:
        """Generate job description report as text bytes"""
        text_report = self.generate_job_description_text(form_data, job_description)
        return text_report.encode('utf-8')

# Global instance - using SimplePDFGenerator instead of ReportLab
pdf_generator = SimplePDFGenerator()
